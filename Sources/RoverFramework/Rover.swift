import Foundation
import Flynn
import libpq

// swiftlint:disable function_body_length

fileprivate extension Array where Element == UInt8 {
   func getCCPointer() -> UnsafePointer<Int8>? {
       return self.withUnsafeBufferPointer { buffered -> UnsafePointer<Int8>? in
           return buffered.baseAddress?.withMemoryRebound(to: Int8.self, capacity: count) { $0 }
       }
   }
}

fileprivate extension Array where Element == Int8 {
   func getPointer() -> UnsafePointer<Int8>? {
       return self.withUnsafeBufferPointer { $0.baseAddress }
   }
}

public final class Rover: Actor {
    public static func ignore(_ result: Result) {

    }

    public static func warn(_ result: Result) {
        if let error = result.error {
            print(error)
        }
    }

    public static func error(_ result: Result) {
        if let error = result.error {
            fatalError(error)
        }
    }

    private var connectionInfo: ConnectionInfo?
    private var connectionPtr = OpaquePointer(bitPattern: 0)

    private var connected: Bool {
        return PQstatus(connectionPtr) == CONNECTION_OK
    }

    deinit {
        disconnect()
    }

    public override init() {
        super.init()

        unsafeCoreAffinity = .preferEfficiency

        Flynn.Timer(timeInterval: 1.0, repeats: true, self) { _ in
            if let connectionInfo = self.connectionInfo,
                self.connected == false && connectionInfo.autoReconnect {
                print("reconnecting to database...")
                _ = self._beConnect(connectionInfo)
            }
        }
    }

    private func disconnect() {
        if connectionPtr != nil {
            PQfinish(connectionPtr)
            connectionPtr = OpaquePointer(bitPattern: 0)
        }
    }

    private func _beConnect(_ info: ConnectionInfo) -> Bool {
        connectionInfo = info
        connectionPtr = PQconnectdb(info.description)
        return connected
    }

    private func _beClose() {
        disconnect()
    }

    private func _beRun(_ statement: String) -> Result {
        return Result(PQexec(connectionPtr, statement))
    }

    private func _beRun(_ statement: String, _ params: [Any?]) -> Result {
        let count = params.count
        let values = UnsafeMutablePointer<UnsafePointer<Int8>?>.allocate(capacity: count)
        let types = UnsafeMutablePointer<Oid>.allocate(capacity: count)
        let lengths = UnsafeMutablePointer<Int32>.allocate(capacity: count)
        let formats = UnsafeMutablePointer<Int32>.allocate(capacity: count)
        defer {
            values.deinitialize(count: count) ; values.deallocate()
            types.deinitialize(count: count) ; types.deallocate()
            lengths.deinitialize(count: count) ; lengths.deallocate()
            formats.deinitialize(count: count) ; formats.deallocate()
        }
        var asStrings = [String]()
        var temps = [[UInt8]]()
        for idx in 0..<count {
            switch params[idx] {
            case let value as String:
                var valueB = [UInt8](value.utf8)
                valueB.append(0)
                temps.append(valueB)
                values[idx] = temps.last!.getCCPointer()!
                types[idx] = 0
                lengths[idx] = 0
                formats[idx] = 0
            case let value as [UInt8]:
                let length = Int32(value.count)
                values[idx] = value.getCCPointer()!
                types[idx] = 17
                lengths[idx] = length
                formats[idx] = 1
            case let value as [Int8]:
                let length = Int32(value.count)
                values[idx] = value.getPointer()!
                types[idx] = 17
                lengths[idx] = length
                formats[idx] = 1
            case let value as Data:
                let valueB = value.map { $0 }
                let length = Int32(valueB.count)
                temps.append(valueB)
                values[idx] = temps.last!.getCCPointer()!
                types[idx] = 17
                lengths[idx] = length
                formats[idx] = 1
            default:
                if let params = params[idx] {
                    if let value = params as? [String] {
                        asStrings.append("{\(value.joined(separator: ","))}")
                    } else {
                        asStrings.append("\(params)")
                    }
                    var valueB = [UInt8](asStrings.last!.utf8)
                    valueB.append(0)
                    temps.append(valueB)
                    values[idx] = temps.last!.getCCPointer()!
                } else {
                    values[idx] = nil
                }
                types[idx] = 0
                lengths[idx] = 0
                formats[idx] = 0
            }
        }
        return Result(PQexecParams(connectionPtr, statement, Int32(count), nil, values, lengths, formats, Int32(0)))
    }

}

// MARK: - Autogenerated by FlynnLint
// Contents of file after this marker will be overwritten as needed

extension Rover {

    @discardableResult
    public func beConnect(_ info: ConnectionInfo,
                          _ sender: Actor,
                          _ callback: @escaping ((Bool) -> Void)) -> Self {
        unsafeSend {
            let result = self._beConnect(info)
            sender.unsafeSend { callback(result) }
        }
        return self
    }
    @discardableResult
    public func beClose() -> Self {
        unsafeSend(_beClose)
        return self
    }
    @discardableResult
    public func beRun(_ statement: String,
                      _ sender: Actor,
                      _ callback: @escaping ((Result) -> Void)) -> Self {
        unsafeSend {
            let result = self._beRun(statement)
            sender.unsafeSend { callback(result) }
        }
        return self
    }
    @discardableResult
    public func beRun(_ statement: String,
                      _ params: [Any?],
                      _ sender: Actor,
                      _ callback: @escaping ((Result) -> Void)) -> Self {
        unsafeSend {
            let result = self._beRun(statement, params)
            sender.unsafeSend { callback(result) }
        }
        return self
    }

}
