import Flynn
import libpq

public final class Rover: Actor {
    private var connectionInfo = ConnectionInfo()
    private var connection = OpaquePointer(bitPattern: 0)

    private var connected: Bool {
        return PQstatus(connection) == CONNECTION_OK
    }

    private func _beConnect(_ info: ConnectionInfo) -> Bool {
        connectionInfo = info
        connection = PQconnectdb(info.description)
        return connected
    }

    private func _beClose() {
        if connection != nil {
            PQfinish(connection)
            connection = OpaquePointer(bitPattern: 0)
        }
    }
}

// MARK: - Autogenerated by FlynnLint
// Contents of file after this marker will be overwritten as needed

extension Rover {

    @discardableResult
    public func beConnect(_ info: ConnectionInfo,
                          _ sender: Actor,
                          _ callback: @escaping ((Bool) -> Void)) -> Self {
        unsafeSend {
            let result = self._beConnect(info)
            sender.unsafeSend { callback(result) }
        }
        return self
    }
    @discardableResult
    public func beClose() -> Self {
        unsafeSend(_beClose)
        return self
    }

}
